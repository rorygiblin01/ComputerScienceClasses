import java.util.Arrays;

public class MinHeap
{
	//constructor for min heap and basic methods
    private int capacity = 10;
    private int size = 0;
    private Order[] items = new Order[capacity];
    private int getLeftChildIndex(int parentIndex) 
    {
        return 2 * parentIndex + 1;
    }
    private int getRightChildIndex(int parentIndex)
    {
        return 2 * parentIndex + 2;
    }

    private int getParentIndex(int childIndex) 
    {
        return (childIndex - 1) / 2;
    }

    private boolean hasLeftChild(int index) 
    {
        return getLeftChildIndex(index) < size;
    }
    private boolean hasRightChild(int index) 
    {
        return getRightChildIndex(index) < size;
    }

    private boolean hasParent(int index) 
    {
        return getParentIndex(index) >= 0;
    }

    private Order leftChild(int index) 
    {
        return items[getLeftChildIndex(index)];
    }

    private Order rightChild(int index) 
    {
        return items[getRightChildIndex(index)];
    }
    private Order parent(int index) 
    {
        return items[getParentIndex(index)];
    }

    private void swap(int indexOne, int indexTwo) 
    {
        Order temp = items[indexOne];
        items[indexOne] = items[indexTwo];
        items[indexTwo] = temp;
    }
    public Order peek() 
    {
        if (size == 0) 
        {
            throw new IllegalStateException();
        }
        return items[0];
    }
    private void ensureCapacity() 
    {
        if (size == capacity) 
        {
            items = Arrays.copyOf(items, capacity * 2);
            capacity *= 2;
        }
    }
    public boolean isEmpty() 
    {
        return size == 0;
    }
    public Order remove() 
    {
        if (size == 0) 
        {
            throw new IllegalStateException();
        }
        Order item = items[0];
        items[0] = items[size - 1];
        size--;
        heapifyDown();
        return item;
    }
    private void heapifyUp() 
    {
        int index = size - 1;
        while (hasParent(index) && parent(index).compareTo(items[index]) > 0) 
        {
            swap(getParentIndex(index), index);
            index = getParentIndex(index);
        }
    }
    private void heapifyDown() 
    {
        int index = 0;
        while (hasLeftChild(index)) 
        {
            int smallerChildIndex = getLeftChildIndex(index);
            if (hasRightChild(index) && rightChild(index).compareTo(leftChild(index)) < 0) 
            {
                smallerChildIndex = getRightChildIndex(index);
            }
            if (items[index].compareTo(items[smallerChildIndex]) < 0) 
            {
                break;
            } 
            else 
            {
                swap(index, smallerChildIndex);
            }

            index = smallerChildIndex;
        }
    }
    public Order poll() 
    {
        if (size == 0) 
        {
            throw new IllegalStateException();
        }
        Order item = items[0];
        items[0] = items[size - 1];
        size--;
        heapifyDown();
        return item;
    }

    public void add(Order order) 
    {
        ensureCapacity();
        items[size] = order;
        size++;
        heapifyUp();
    }
}
